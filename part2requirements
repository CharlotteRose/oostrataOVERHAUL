CS 361 – Fall 2014
OS Simulator – Assignment 2: Process Control Blocks

*****************************************************
//comment block :D
*****************************************************

Part 1: PCB Data Structure
Your task is to create a data structure to represent a Process Control Block. Your PCB structure must have the following
components:
	Aa. Process Name – string
	B. Process Class – Identifies the process as an Application or System type
		a. Can represent this however you want, int, char, bool, etc
		b. You may want to use a #define to make your code more clear if using C++
	C. Priority – integer that will contain values of -127 to +128
		a. You will need to check for valid priorities later in the program
	D. State – the current state of the process
		a. There are “two” states that must be maintained in the PCB
			i. Is the process running, ready, or blocked?
			ii. Is the process suspended or not suspended?
	E. Memory – an integer to say how much memory the process needs.

Part 2: Lists (Queues) of PCBs and Operations
Now that you have the data structure, we need to do things with it. In an operating system, PCBs are commonly stored
in Queues. In your program, you need to implement functionality for this. You have some choices on how to do this.
For instance, you could:
	A. Have a linked list of PCBs  //the method I pursued 
		a. Each PCB contains a pointer to the previous and next PCB structure

Next, you need to decide how many Queues that you need to have. There are options here as well.
	A. 2 queues: Ready and Blocked
		a. Ready and Blocked queues will each hold processes in their respective state, regardless of
		suspended or not suspended.
	B. 4 queues: Ready, blocked, suspended ready, suspended blocked.
		C. Think up a third way.

PCB Queues:
You will need to create a data structure for the queue itself. Things you will need:
	1. Number of nodes in the queue	//
	2. Pointer to the head of the queue
	3. Pointers to the Tail (end) of the Queue
		a. The head and tail pointers will either be to the PCBs themselves or to Queue nodes, depending on how
		you choose to implement your queues.
	4. Items will be inserted into the queues in a FIFO (First In, First Out) ordering (FOR NOW)

PCB Functions:
You will need to create some functions to work with your PCBs.
1. AllocatePCB
	a. Creates memory for a new PCB
	b. Takes no parameters
	c. Returns a pointer to the new PCB, or NULL If there is an error.
2. FreePCB
	a. Frees all memory associated with a PCB
	b. Parameter is a PCB pointer
	c. Can either have no return, or return an error code
3. SetupPCB
	a. Initializes a PCB’s content (name, priority, class)
	b. Parameters are: Name, Priority, Class
	c. Should check that the parameters are valid (See FindPCB to make sure there isn’t a PCB with that name
	lready)
	d. Calls the PCBAllocate function to create the PCB’s memory
	e. Sets the name, priority, and class based on your parameters.
	f. Set state to ready, not suspended (FOR NOW)
4. FindPCB
	a. Searches all queues for PCB with a given name
	b. Parameters: Process Name
	c. Should search all queues and all states to find the PCB with that name.
	d. Returns a pointer to the PCB if found, NULL if not found
5. InsertPCB
	a. Parameters:
		i. Queue – Which Queue to Insert Into
			1. OR you can determine this automatically by making your function check the process’s
			state.
		ii. PCB* - pointer to the PCB that’s being inserted
	b. Inserts the given PCB into the specified queue
		i. Using the FIFO order (basically insert at the end) (FOR NOW)
	c. Can return nothing or an error code
6. RemovePCB
	a. Removes the PCB from the queue it’s currently in
	b. Parameters: PCB Pointer
	c. Use FindPCB to find the PCB and removes the PCB from whatever Queue it’s in.
	d. Does not free the memory from the PCB and does not delete it.
	e. Can either return nothing or an error code

The Lifetime of a Process:
1. Operating System needs to create a process. So it calls SetupPCB with process info.
2. SetupPCB calls FindPCB to verify that no process has the same name.
3. SetupPCB calls AllocatePCB which returns a pointer to the new PCB
4. SetupPCB initializes all PCB attributes and returns a pointer to the PCB.
5. Operating System calls InsertPCB to insert the PCB into the correct Queue.
6. The process runs for awhile and then the Operating System decides that the process needs terminated.
Operating System calls RemovePCB to remove the PCB from the Queue that it’s currently in.
7. Operating System calls FreePCB to free the memory held by the PCB, including the PCB itself.

Now that the “Operating System” can do things with the PCBs, we have to let the user do things. Implement the
following commands:
User Commands:
5. Suspend
	a. Get PCB name from the user
	b. Puts the PCB in the suspended state
	c. Might require changing queues (from ready to suspended ready, for example) if 4 queues are used
	d. Display appropriate error or success message.
6. Resume
	a. Puts process in not suspended state
	b. Might require changing queues
	c. Display appropriate error or success message.
7. Set priority
	a. Get PCB name and new priority from user
	b. Check that the PCB exists
	c. Check that the new priority is valid
	d. Display appropriate error or success message.
8. Show PCB
	a. Get PCB name from the user
	b. Display all information about the PCB (except pointers) in “attractive” format
	c. Display error if PCB doesn’t exist.
9. Show all
	a. Show information for all PCB’s in all queues, in any convenient order
	b. At a minimum, must show process name, state, suspended status, and priority.
	c. Limit information about a single PCB to a single line
	d. Must fit on a single screen, or use a mechanism that allows the user to continue on once the screen is
	full.
10. Show ready
	a. Show processes in the ready state
	b. Show same info in same format as the show all command
	c. Must show the processes in the order they exist in the queue
11. Show blocked
	a. Same as show ready, except show the processes in the blocked state