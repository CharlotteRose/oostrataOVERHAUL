Test Files:

In the test files, we are mimicking instances of program use. When we have created an instance
of the class(program), we then run it and feed it dummy values to check to the output. 
If the output matches the expected values then the method passes the test. 

	//Declaration of class   					//Implementations
___________________________________________________________________________________
|Test Class:                                                                      |
|public:                                                                          |
|   									                                          |
|  pcbTest();						    {pcbStruct* test = new pcbStruct;}        |
|                                                                                 |
|	~pcbTest();							{}                                        |
|                                                                                 |
|	bool createsStruct();				                                          |
|    bool canPopulate();                                                          |
|    bool canDelete();                                                            |
|    bool testName(std::string pName);                                            |
|    bool testClass(int pClass);                                                  |
|    bool testPriority(int pPriority);                                            |
|    bool testMemory(int pMemory);                                                | 
|    																			  |				
|private:																		  |
|    pcbStruct* testStruct														  |
|_________________________________________________________________________________|
	
	
Our entry point for contact with the PCB comes from the user electing to create a process.
 
 
The Request Class:

		constructor for the class.

		destructor for the class.
		
		}
		Method interacts with the user to offer a menu of options to choose from. Their response is 
		stored in the variable currentOption. 
		
	
			Variable gives a base condition to trigger the execution of the code 
			inside of the preceding loop. 
			}
			Given the condition that currentOption was equal to ) the loop initiates a check sequence to 
			test the user input and examine if it is valid. 
		
				The Screen print the above message and wait for the user to respond by offering input. 
			
				At present these are the only options that a user can choose from. The users choice is then 
				saved in the variable currentOption. 
			
				currentOption is now equal to the users choice.				
			
				The condition of currentOption being equal to 1 is checked. If they are equal
				the following operations are preformed:
				
					clearScreen is called to print a number of blank lines on the screen. 
					The property rType is then set the string value "system".
					The getRequest method then terminates and returns the value 1. 
				If the former condition is not true the next condition, currentOption is equal to 2 in this case
				is then checked. If they are equal the following operations are preformed:
				
					clearScreen is called to print a number of blank lines on the screen. 
					The property rType is then set the string value "PCB".
					The getRequest method then terminates and returns the value 2. 				
			}
			}
				The next condition is checked if the previous two have failed. If this condition is true the 
				following operations are preformed:
				
					The variable confirmExit is created to store user input. 
					
					User is told what is required to oficially exit the program. 
					
					We store the input. 
					
					If their response is equal to Yes, yes, or YES, the program does the following:
				
						clearScreen is called to print a number of blank lines on the screen.						
					
						Prints out some space.
						
						Check statement. 
					
						The property rType gets set to the string value exit 
					
						Returns 77 so that the condition in maip.cpp ( WHILE (GO!= 77) ) 
				}
				ELSE{
					If none of the conditions have been met	we return the value 3 to remain in the loop.			
			}
			}
			ELSE{
				Other wise the user is informed of an invalid input response. 
				The currentOption variable is then set to 0 to remain loop that offers 
				CURRENTOPTION =0;
			}
		}
}
    VOID DISPLAYREQUEST();
		THIS METHOD 
    VOID CLEARSCREEN();
PRIVATE:
    STD::STRING RTYPE;
