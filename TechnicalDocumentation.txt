Test Files:

In the test files, we are mimicking instances of program use. When we have created an instance
of the class(program), we then run it and feed it dummy values to check to the output. 
If the output matches the expected values then the method passes the test. 

	//Declaration of class   					//Implementations
___________________________________________________________________________________
|Test Class:                                                                      |
|public:                                                                          |
|   									                                          |
|  pcbTest();						    {pcbStruct* test = new pcbStruct;}        |
|                                                                                 |
|	~pcbTest();							{}                                        |
|                                                                                 |
|	bool createsStruct();				                                          |
|    bool canPopulate();                                                          |
|    bool canDelete();                                                            |
|    bool testName(std::string pName);                                            |
|    bool testClass(int pClass);                                                  |
|    bool testPriority(int pPriority);                                            |
|    bool testMemory(int pMemory);                                                | 
|    																			  |				
|private:																		  |
|    pcbStruct* testStruct														  |
|_________________________________________________________________________________|
	
	
Our entry point for contact with the PCB comes from the user electing to create a process.
 
 
The Request Class:
PUBLIC:
    REQUEST();
		This is the standard constructor for the class.
		
    ~REQUEST();
		This is the standard destructor for the class.
		
    GETREQUEST()  
		This method interacts with the user to offer a menu of options to choose from. Their response is 
		stored in the variable currentOption. 
		
		INT CURRENTOPTION = 0;
			The creation of this variable gives a base condition to trigger the execution of the code 
			inside of the preceding loop. 
			
		WHILE (CURRENTOPTION == 0){
			Given the condition that currentOption was equal to ) the loop initiates a check sequence to 
			test the user input and examine if it is valid. 
		
			STD::COUT<< "PLEASE CHOOSE FROM ONE OF THE FOLLOWING OPTIONS:\N(NUMERIC VALUES ONLY) "<< STD::ENDL;
				The Screen print the above message and wait for the user to respond by offering input. 
			
			STD::COUT << " 1. SYSTEM INFORMATION\N 2. PCB SETTINGS\N 3. EXIT\N" << STD::ENDL;
				At present these are the only options that a user can choose from. The users choice is then 
				saved in the variable currentOption. 
			
			STD::CIN >> CURRENTOPTION;
				currentOption is now equal to the users choice.				
			
			IF (CURRENTOPTION == 1){
				The condition of currentOption being equal to 1 is checked. If they are equal
				the following operations are preformed:
				
				CLEARSCREEN();
					clearScreen is called to print a number of blank lines on the screen. 
				RTYPE = "SYSTEM";
					The property rType is then set the string value "system".
				RETURN 1;
					The getRequest method then terminates and returns the value 1. 
			}
			ELSE IF (CURRENTOPTION == 2){
				If the former condition is not true the next condition, currentOption is equal to 2 in this case
				is then checked. If they are equal the following operations are preformed:
				
				CLEARSCREEN();
					clearScreen is called to print a number of blank lines on the screen. 
				RTYPE = "PCB";
					The property rType is then set the string value "PCB".
				RETURN 2;
					The getRequest method then terminates and returns the value 2. 				
			}
			ELSE IF (CURRENTOPTION == 3){
				The next condition is checked if the previous two have failed. If this condition is true the 
				following operations are preformed:
				
				STD::STRING CONFIRMEXIT = "";
					The variable confirmExit is created to store user input. 
					
				STD::COUT << " PLEASE TYPE IN 'YES' TO CONFIRM EXIT OF OOSTRTA.\N PRESS ANY KEY TO RETURN TO HOME MENU\N\N" << STD::ENDL;
					  
				STD::CIN >> CONFIRMEXIT;
				IF(CONFIRMEXIT == "YES"||CONFIRMEXIT == "YES"||CONFIRMEXIT == "YES"){
					CLEARSCREEN();
					STD::COUT <<"\N\N";
					//STD::COUT <<"TITO WAS GANGSTER";
					RETURN 77; //DUMMY VALUE I CAN CONFIDENTLY SAY WE WILL NOT REACH IN MENU OPTIONS
				}
				ELSE{
					//STD::COUT <<"TITO WAS A GANGSTER";
					RTYPE = "EXIT";
					RETURN 3;
				}
			}
			ELSE{
				STD::COUT << "INVALID OPTION\N\N\N\N";
				CURRENTOPTION =0;
			}
		}
}
    VOID DISPLAYREQUEST();
		THIS METHOD 
    VOID CLEARSCREEN();
PRIVATE:
    STD::STRING RTYPE;
