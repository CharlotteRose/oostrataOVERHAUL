Test Files:

In the test files we are mimicking instacnces of program use. When we have created the instacnce
of the class(program), we then run it and feed it dummy values to check to the output. 
If the output matches the expected values then the method passes the test. 

	//Declaration of class   					//Implementations
Test Class:
public:
    									
	pcbTest();						    {pcbStruct* test = new pcbStruct;}
    
	~pcbTest();							{}
    
	bool createsStruct();				
    bool canPopulate();
    bool canDelete();
    bool testName(std::string pName);
    bool testClass(int pClass);
    bool testPriority(int pPriority);
    bool testMemory(int pMemory);   
    
private:
    pcbStruct* testStruct

	
	
Our entry point for contact with the PCB comes from the user electing to create a process.
 
 
The Request Class:
public:
    request();
		This is the standard constructor for the class.
    ~request();
		This is the standard destructor for the class. 
    getRequest()  
		This method interacts with the user to offer a menu of options to choose from. Their response is 
		stored in the variable currentOption. 
		int currentOption = 0;
			The creation of this variable gives the 
		while (currentOption == 0){
			std::cout<< "Please choose from one of the following options:\n(Numeric values only) "<< std::endl;
			std::cout << " 1. System Information\n 2. PCB Settings\n 3. Exit\n" << std::endl;
			std::cin >> currentOption;
			if (currentOption == 1){
				ClearScreen();
				rType = "System";
				return 1;
			}
			else if (currentOption == 2){
				ClearScreen();
				rType = "PCB";
				return 2;
			}
			else if (currentOption == 3){
				std::string confirmExit = "";
				std::cout << " Please type in 'Yes' to confirm exit of OOSTRTA.\n Press any key to return to Home menu\n\n" << std::endl;
				std::cin >> confirmExit;
				if(confirmExit == "YES"||confirmExit == "Yes"||confirmExit == "yes"){
					ClearScreen();
					std::cout <<"\n\n";
					//std::cout <<"tito was gangster";
					return 77; //dummy value I can confidently say we will not reach in menu options
				}
				else{
					//std::cout <<"tito was a gangster";
					rType = "exit";
					return 3;
				}
			}
			else{
				std::cout << "Invalid Option\n\n\n\n";
				currentOption =0;
			}
		}
}
    void displayRequest();
		This method 
    void ClearScreen();
private:
    std::string rType;
